<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CommandInvoker" Id="{f6ea97c1-b361-4680-9d27-e17b57602f50}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CommandInvoker
VAR_GENERIC CONSTANT
	CommandCapacity : UINT := 10;
END_VAR
EXTENDS FB_Base
VAR
	_Commands : ARRAY[0..CommandCapacity - 1] OF I_Command;
	_CommandCount : UINT;
	
	_InvokeIndex : UINT;
	_ProgressState : E_Progress;
	
	_PauseRequest : BOOL;
	_StepMode : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddCommand" Id="{558a4463-945b-4535-b113-75c835b88ed2}">
      <Declaration><![CDATA[METHOD AddCommand : BOOL
VAR_INPUT
	command : I_Command;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (NOT _CommandCount < CommandCapacity) THEN
	F_Log('Can not add any more commands!');
	RETURN;
END_IF

_Commands[_CommandCount] := command;
_CommandCount := _CommandCount + 1;

AddCommand := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearCommands" Id="{9a94bee6-4b43-4ebc-88ec-031ddc3491a8}">
      <Declaration><![CDATA[METHOD ClearCommands
VAR
	i : UINT;
	p : POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _CommandCount - 1 DO
	__QUERYPOINTER(_Commands[i], p);
	__DELETE(p);
END_FOR

_CommandCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="CommandCount" Id="{d512b632-5a54-480f-9bce-4617787f69fe}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY CommandCount : UINT]]></Declaration>
      <Get Name="Get" Id="{284783af-223d-4d79-a2b0-d4621b790078}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CommandCount := _CommandCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Commands" Id="{2ac8551e-9166-43fb-bc1a-2591e3449bd0}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY Commands : REFERENCE TO ARRAY[0..CommandCapacity - 1] OF I_Command]]></Declaration>
      <Get Name="Get" Id="{7c052ed9-b4b8-4aba-bf27-d5e3facd9369}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Commands REF= _Commands;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cyclic" Id="{3cedf336-2bc5-4fe9-9158-43b939c09fe9}">
      <Declaration><![CDATA[METHOD Cyclic
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_ProgressState = E_Progress.Running) THEN
	Invoke();
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Exit" Id="{8216066f-20db-4c2b-b4a5-5d35467c67e9}">
      <Declaration><![CDATA[//FB_Exit must be implemented explicitly. If there is an implementation, then the
//method is called before the controller removes the code of the function block instance
//(implicit call). The return value is not evaluated.
METHOD FB_Exit: BOOL
VAR_INPUT
    bInCopyCode: BOOL;  // TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change).  
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearCommands();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Invoke" Id="{1fb6d0da-5c0e-4695-bca1-1392766a0f71}">
      <Declaration><![CDATA[METHOD PRIVATE Invoke
VAR
	commandProgress : E_Progress;
	progress : T_MaxString;
	test : STRING := 'test';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (_CommandCount = 0) THEN
	_ProgressState := E_Progress.Completed;
	
	F_Log('Invoker finished. No commands were executed.');	
END_IF

IF (_InvokeIndex < _CommandCount) THEN
	
	commandProgress := _Commands[_InvokeIndex].Execute();
	IF (commandProgress = E_Progress.Completed) THEN
		
		F_Log(F_BuildString('Command "').Append(_Commands[_InvokeIndex].Description).Append('" has finished!').GetString());
		
		IF (_PauseRequest OR _StepMode) THEN
			_ProgressState := E_Progress.Paused;
			_PauseRequest := FALSE;
		END_IF
		
		IF (_InvokeIndex = _CommandCount - 1) THEN
			_ProgressState := E_Progress.Completed;
			
			F_Log('Invoker finished');
		END_IF

		_InvokeIndex := _InvokeIndex + 1;
		
		F_Log(
			F_BuildString('Invoker progress  ')
				.Append(TO_STRING(_InvokeIndex))
				.Append('/')
				.Append(TO_STRING(_CommandCount))
				.Append('  ')
				.Append(LREAL_TO_FMTSTR(ProgressPercent, 1, TRUE))
				.Append(' %s')
				.GetString());
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="InvokeIndex" Id="{ed028e02-57f8-4247-bc34-7a9644dd0787}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY InvokeIndex : UINT]]></Declaration>
      <Get Name="Get" Id="{a1d3390e-bce7-44b8-86fd-ea6ad8635a83}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InvokeIndex := _InvokeIndex;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Pause" Id="{60346052-1c5c-4869-852f-cee975ff6538}">
      <Declaration><![CDATA[METHOD Pause
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_PauseRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="PauseRequest" Id="{e2ed5e62-1210-44f6-b001-af23576cae5d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY PauseRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{be2f6951-47a5-42fc-80f5-fb5ed713bbd3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PauseRequest := _PauseRequest;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProgressPercent" Id="{a1b66641-0dc1-42f7-9b6f-b32b2a7e9dbc}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ProgressPercent : REAL]]></Declaration>
      <Get Name="Get" Id="{05699fa0-c139-4e87-a24b-14be290e1b8e}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (_CommandCount > 0) THEN
	ProgressPercent := 100.0 * _InvokeIndex / _CommandCount;
ELSE
	ProgressPercent := 0;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ProgressState" Id="{9ad5fd53-3f56-4334-a0c6-c35562f308f3}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ProgressState : E_Progress]]></Declaration>
      <Get Name="Get" Id="{40a75a82-8678-4c39-9502-b446977d447b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProgressState := _ProgressState;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{e85a53c0-fd47-4631-ae26-653508aa1e43}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_InvokeIndex := 0;
_ProgressState := E_Progress.Idle;

_PauseRequest := FALSE;

ResetCommands();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetCommands" Id="{4bf09e81-2b2f-44c7-892b-f6b084ee8f3d}">
      <Declaration><![CDATA[METHOD ResetCommands : BOOL
VAR
	i : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _CommandCount - 1 DO
	_Commands[i].Reset();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{07470539-7ede-4172-96a9-a7980587ec0b}">
      <Declaration><![CDATA[METHOD Start
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _ProgressState OF
	
	E_Progress.Idle,
	E_Progress.Paused,
	E_Progress.Completed:
		
		IF (NOT(_ProgressState = E_Progress.Paused
				OR (_ProgressState = E_Progress.Running AND (_PauseRequest OR _StepMode)))) THEN
			
			_InvokeIndex := 0;
			
			ResetCommands();
		END_IF
		
		_ProgressState := E_Progress.Running;
		_PauseRequest := FALSE;

		F_Log('Invoker started');
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Property Name="StepMode" Id="{8cddf28e-f041-4432-90df-0de57b23caaf}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY StepMode : BOOL]]></Declaration>
      <Get Name="Get" Id="{329dfed4-6231-4420-8c66-6b4c744a4c62}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StepMode := _StepMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cf9bb55f-41ba-4494-a585-3446254d6539}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_StepMode := StepMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>