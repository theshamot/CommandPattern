<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{f93d2092-19d3-483c-b2c9-992cdf119443}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	valve : FB_Valve;
	axis : FB_Axis;
	valveFactory : FB_ValveCommandFactory;
	axisFactory : FB_AxisCommandFactory;
	flowFactory : FB_FlowCommandFactory;
	
	invoker : FB_CommandInvoker<20>;
	subsequence : FB_CommandInvoker<10>;
	
	start : BOOL;
	create : BOOL;
	
	pauseIndex : INT := -1;
	
	test : BOOL;
	test2 : BOOL;
	test3 : BOOL;
	test4 : BOOL;
	
	val : I_BoolValue;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF create THEN
	create := FALSE;
	
	subsequence.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
	subsequence.AddCommand(axisFactory.CreateCommand(axis := axis, target := 50, 'move axis to position'));
	subsequence.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Work, 'move valve to work'));

	// This is replacement for a CASE OF state machines
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
	invoker.AddCommand(axisFactory.CreateCommand(axis := axis, target := 50, 'move axis to position'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Work, 'move valve to work'));
	invoker.AddCommand(flowFactory.CreateCompositeCommand(invoker := subsequence, 'run subsequence'));
// 	invoker.AddCommand(flowFactory.CreateWaitForConditionCommand(And2(Value(test2), Value(test3)), T#0S, T#0S, 'Wait for test2 AND test3'));
	invoker.AddCommand(axisFactory.CreateCommand(axis := axis, target := 0, 'move axis to away'));
// 	invoker.AddCommand(flowFactory.CreateWaitForConditionCommand(NotValue(test2), T#10S, T#0S, 'Wait at least for NOT test2'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
// 	invoker.AddCommand(flowFactory.CreateWaitForConditionCommand(NotValue(test3), T#0S, T#10S, 'Wait for NOT test3, but maximum 10 seconds'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Work, 'move valve to work'));
	invoker.AddCommand(flowFactory.CreateWaitCommand(T#5S, 'wait some time'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
END_IF

IF start THEN
	start := FALSE;
	
	invoker.Start();
END_IF

invoker.Cyclic();

IF (invoker.InvokeIndex = pauseIndex AND invoker.ProgressState <> E_ProgressStatus.Paused) THEN
	invoker.Pause();
END_IF

IF test THEN
	test := FALSE;
	val := And2(Value(test4), Or2(Value(test2), NotValue(test3)));
END_IF

IF (val <> 0) THEN
	val.Value;
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>