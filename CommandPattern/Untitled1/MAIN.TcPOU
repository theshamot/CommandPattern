<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{f93d2092-19d3-483c-b2c9-992cdf119443}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	valve : FB_Valve;
	axis : FB_Axis;
	valveFactory : FB_ValveCommandFactory;
	axisFactory : FB_AxisCommandFactory;
	
	invoker : FB_CommandInvoker<20>;
	
	start : BOOL;
	create : BOOL;
	
	pauseIndex : INT := -1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF create THEN
	create := FALSE;

	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
	invoker.AddCommand(axisFactory.CreateCommand(axis := axis, target := 50, 'move axis to position'));                  
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Work, 'move valve to work'));
	invoker.AddCommand(axisFactory.CreateCommand(axis := axis, target := 0, 'move axis to away'));                       
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Work, 'move valve to work'));
	invoker.AddCommand(valveFactory.CreateCommand(valve := valve, target := E_ValvePosition.Home, 'move valve to home'));
END_IF

IF start THEN
	start := FALSE;
	
	invoker.Start();
END_IF

invoker.Cyclic();

IF (invoker.InvokeIndex = pauseIndex AND invoker.ProgressState <> E_Progress.Paused) THEN
	invoker.Pause();
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>